"""Test review.py."""
from review import call_gpt, chunks, splits


PR_PATCH = """
From b904608f24c4c9b25a6d0a718341e3687bd79545 Mon Sep 17 00:00:00 2001
From: Daniel Ciborowski <dciborow@microsoft.com> Date: Wed, 12 Apr 2023 06:01:28 +0000
Subject: [PATCH 1/2] use user-defined types with Cosmos DB
---
modules/storage/cosmos-db/README.md | 42 +-
modules/storage/cosmos-db/main.bicep | 96 +-
modules/storage/cosmos-db/main.json | 986 +++++++++++++++++-
.../storage/cosmos-db/module/bicepconfig.json | 6 +
modules/storage/cosmos-db/module/cosmos.bicep | 286 +++++
modules/storage/cosmos-db/version.json | 2 +-
6 files changed, 1372 insertions(+), 46 deletions(-)
create mode 100644 modules/storage/cosmos-db/module/bicepconfig.json
create mode 100644 modules/storage/cosmos-db/module/cosmos.bicep

diff --git a/modules/storage/cosmos-db/README.md b/modules/storage/cosmos-db/README.md index 7207506a..1c4e584b 100644 --- a/modules/storage/cosmos-db/README.md +++ b/modules/storage/cosmos-db/README.md @@ -9,20 +9,34 @@
    It allows for the creation of a new Cosmos DB account or use of an existing one, ## Parameters -| Name | Type | Required | Description | -| :----------------------------- | :------: | :------: | :-------------------------------------------------------------------------------------------------------------------------------------------- | -| `location` | `string` | Yes | Deployment Location | -| `prefix` | `string` | No | Prefix of Cosmos DB Resource Name | -| `name` | `string` | No | Name of Cosmos DB Resource | -| `maxStalenessPrefix` | `int` | No | Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 2147483647. Multi Region: 100000 to 2147483647. | -| `maxIntervalInSeconds` | `int` | No | Max lag time (minutes). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400. | -| `defaultConsistencyLevel` | `string` | No | The default consistency level of the Cosmos DB account. | -| `systemManagedFailover` | `bool` | No | Enable system managed failover for regions | -| `secondaryLocations` | `array` | No | array of region objects or regions: [region: string] | -| `enableMultipleWriteLocations` | `bool` | No | Multi-region writes capability allows you to take advantage of the provisioned throughput for your databases and containers across the globe. | -| `enableCassandra` | `bool` | No | Enable Cassandra Backend. | -| `enableServerless` | `bool` | No | Enable Serverless for consumption-based usage. | -| `isZoneRedundant` | `bool` | No | Toggle to enable or disable zone redudance. | +| Name | Type | Required | Description | +| :------------------------------- | :------: | :------: | :-------------------------------------------------------------------------------------------------------------------------------------------- | +| `location` | `string` | Yes | Deployment Location | +| `prefix` | `string` | No | Prefix of Cosmos DB Resource Name | +| `name` | `string` | No | Name of Cosmos DB Resource | +| `maxStalenessPrefix` | `int` | No | Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 2147483647. Multi Region: 100000 to 2147483647. | +| `maxIntervalInSeconds` | `int` | No | Max lag time (minutes). Required for BoundedStaleness. Valid ranges, Single Region: 5 to 84600. Multi Region: 300 to 86400. | +| `defaultConsistencyLevel` | `string` | No | The default consistency level of the Cosmos DB account. | +| `systemManagedFailover` | `bool` | No | Enable system managed failover for regions | +| `secondaryLocations` | `array` | No | array of region objects or regions: [region: string] | +| `enableMultipleWriteLocations` | `bool` | No | Multi-region writes capability allows you to take advantage of the provisioned throughput for your databases and containers across the globe. | +| `enableCassandra` | `bool` | No | Enable Cassandra Backend. | +| `enableGremlin` | `bool` | No | Enable Gremlin API. | +| `enableServerless` | `bool` | No | Enable Serverless for consumption-based usage. | +| `enableTable` | `bool` | No | Enable Table API. | +| `enableMongo` | `bool` | No | Enable Mongo API. | +| `isZoneRedundant` | `bool` | No | Toggle to enable or disable zone redudance. | +| `disableLocalAuth` | `bool` | No | Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication. | +| `enablePartitionMerge` | `bool` | No | Flag to indicate enabling/disabling of Partition Merge feature on the account | +| `enableCassandraConnector` | `bool` | No | Enables the cassandra connector on the Cosmos DB CODE_OF_CONDUCT.md CONTRIBUTING.md account | +| `enableAnalyticalStorage` | `bool` | No | Flag to indicate whether to enable storage analytics. | +| `disableRateLimitingResponses` | `bool` | No | Disable rate limiting on responses. | +| `analyticalStorageConfiguration` | `string` | No | Analytical storage specific properties. | +| `serverVersion` | `string` | No | | +| `enableAggregationPipeline` | `bool` | No | Enable Aggregation Pipeline | +| `enableMongoDBv34` | `bool` | No | Enable MongoDBv34 | +| `allowSelfServeUpgradeToMongo36` | `bool` | No | Allow Self Serve Upgrade To Mongo36 | +| `enablemongoEnableDocLevelTTL` | `bool` | No | Enable mongoEnableDocLevelTTL | ## Outputs
diff --git a/modules/storage/cosmos-db/main.bicep b/modules/storage/cosmos-db/main.bicep index 2784b9b8..eb2adcfd 100644 --- a/modules/storage/cosmos-db/main.bicep +++ b/modules/storage/cosmos-db/main.bicep @@ -5,7 +5,9 @@
    param location string param prefix string = enableCassandra ? 'coscas' : 'cosmos' @description('Name of Cosmos DB Resource') -param name string = '${prefix}${uniqueString(resourceGroup().id, location)}' +@minLength(3) +@maxLength(64) +param name string = take('${prefix}${uniqueString(resourceGroup().id, location)}', 64) @description('Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 2147483647. Multi Region: 100000 to 2147483647.') @minValue(10) @@ -33,12 +35,55 @@ param enableMultipleWriteLocations bool = true @description('Enable Cassandra Backend.') param enableCassandra bool = false +@description('Enable Gremlin API.') +param enableGremlin bool = false + @description('Enable Serverless for consumption-based usage.') param enableServerless bool = false +@description('Enable Table API.') +param enableTable bool = false + +@description('Enable Mongo API.') +param enableMongo bool = false || enableMongoDBv34 || allowSelfServeUpgradeToMongo36 || enablemongoEnableDocLevelTTL + @description('Toggle to enable or disable zone redudance.') param isZoneRedundant bool = false +@description('Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.') +param disableLocalAuth bool = false + +@description('Flag to indicate enabling/disabling of Partition Merge feature on the account') +param enablePartitionMerge bool = false + +@description('Enables the cassandra connector on the Cosmos DB CODE_OF_CONDUCT.md CONTRIBUTING.md account') +param enableCassandraConnector bool = false + +@description('Flag to indicate whether to enable storage analytics.') +param enableAnalyticalStorage bool = false + +@description('Disable rate limiting on responses.') +param disableRateLimitingResponses bool = false + +@description('Analytical storage specific properties.') +@allowed([ 'FullFidelity', 'None' ]) +param analyticalStorageConfiguration string = 'FullFidelity' + +@allowed([ '3.2', '3.6', '4.0', '4.2']) +param serverVersion string = '4.2' + +@description('Enable Aggregation Pipeline') +param enableAggregationPipeline bool = false + +@description('Enable MongoDBv34') +param enableMongoDBv34 bool = false + +@description('Allow Self Serve Upgrade To Mongo36') +param allowSelfServeUpgradeToMongo36 bool = false + +@description('Enable mongoEnableDocLevelTTL') +param enablemongoEnableDocLevelTTL bool = false + var consistencyPolicy = { Eventual: { defaultConsistencyLevel: 'Eventual' @@ -65,6 +110,7 @@ var secondaryRegions = [for (region, i) in secondaryLocations: { isZoneRedundant: contains(region, 'isZoneRedundant') ? region.isZoneRedundant : isZoneRedundant }] +#disable-next-line BCP334 var locations = union([ { locationName: location @@ -72,28 +118,48 @@ var locations = union([ isZoneRedundant: isZoneRedundant } ], secondaryRegions) - var capabilities = union( + disableRateLimitingResponses ? [ { name: 'DisableRateLimitingResponses' } ] : [], + enableMongo ? [ { name: 'EnableMongo' } ] : [], + allowSelfServeUpgradeToMongo36 ? [ { name: 'AllowSelfServeUpgradeToMongo36' } ] : [], + enableAggregationPipeline ? [ { name: 'EnableAggregationPipeline' } ] : [], + enableMongoDBv34 ? [ { name: 'MongoDBv34' } ] : [], + enablemongoEnableDocLevelTTL ? [ { name: 'mongoEnableDocLevelTTL' } ] : [], + enableTable ? [ { name: 'EnableTable' } ] : [], + enableGremlin ? [ { name: 'EnableGremlin' } ] : [], enableCassandra ? [ { name: 'EnableCassandra' } ] : [], enableServerless ? [ { name: 'EnableServerless' } ] : [] ) -resource cosmosDB 'Microsoft.DocumentDB/databaseAccounts@2022-05-15' = { - name: toLower(name) - location: location - kind: 'GlobalDocumentDB' - properties: { - consistencyPolicy: consistencyPolicy[defaultConsistencyLevel] - locations: locations - databaseAccountOfferType: 'Standard' - enableAutomaticFailover: systemManagedFailover - enableMultipleWriteLocations: enableMultipleWriteLocations - capabilities: capabilities +module cosmosDB 'module/cosmos.bicep' = { + name: 'deploy-cosmosdb' + params: { + name: name + location: location + properties: { + analyticalStorageConfiguration: enableAnalyticalStorage ? { + schemaType: analyticalStorageConfiguration + } : null + apiProperties: enableMongo ? { + serverVersion: serverVersion + }: null + databaseAccountOfferType: 'Standard' + locations: locations + capabilities: capabilities + consistencyPolicy: consistencyPolicy[defaultConsistencyLevel] + disableLocalAuth: disableLocalAuth + enableAnalyticalStorage: enableAnalyticalStorage + enableAutomaticFailover: systemManagedFailover + enableCassandraConnector: enableCassandraConnector + enableMultipleWriteLocations: enableMultipleWriteLocations + enablePartitionMerge: enablePartitionMerge + + } } } @description('Cosmos DB Resource ID') -output id string = cosmosDB.id +output id string = cosmosDB.outputs.id @description('Cosmos DB Resource Name') -output name string = cosmosDB.name +output name string = cosmosDB.outputs.name
diff --git a/modules/storage/cosmos-db/main.json b/modules/storage/cosmos-db/main.json index 52dcd595..214878a5 100644 --- a/modules/storage/cosmos-db/main.json +++ b/modules/storage/cosmos-db/main.json @@ -5,7 +5,7 @@
    "_generator": { "name": "bicep", "version": "0.16.2.56959", - "templateHash": "6984401003152783394" + "templateHash": "2014006192790443516" } }, "parameters": { @@ -24,7 +24,9 @@ }, "name": { "type": "string", - "defaultValue": "[format('{0}{1}', parameters('prefix'), uniqueString(resourceGroup().id, parameters('location')))]", + "defaultValue": "[take(format('{0}{1}', parameters('prefix'), uniqueString(resourceGroup().id, parameters('location'))), 64)]", + "maxLength": 64, + "minLength": 3, "metadata": { "description": "Name of Cosmos DB Resource" } @@ -89,6 +91,13 @@ "description": "Enable Cassandra Backend." } }, + "enableGremlin": { + "type": "bool", + "defaultValue": false, + "metadata": { + "description": "Enable Gremlin API." + } + }, "enableServerless": { "type": "bool", "defaultValue": false, @@ -96,12 +105,110 @@ "description": "Enable Serverless for consumption-based usage." } }, + "enableTable": { + "type": "bool", + "defaultValue": false, + "metadata": { + "description": "Enable Table API." + } + }, + "enableMongo": { + "type": "bool", + "defaultValue": "[or(or(or(false(), parameters('enableMongoDBv34')), parameters('allowSelfServeUpgradeToMongo36')), parameters('enablemongoEnableDocLevelTTL'))]", + "metadata": { + "description": "Enable Mongo API." + } + }, "isZoneRedundant": { "type": "bool", "defaultValue": false, "metadata": { "description": "Toggle to enable or disable zone redudance." } + }, + "disableLocalAuth": { + "type": "bool", + "defaultValue": false, + "metadata": { + "description": "Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication." + } + }, + "enablePartitionMerge": { + "type": "bool", + "defaultValue": false, + "metadata": { + "description": "Flag to indicate enabling/disabling of Partition Merge feature on the account" + } + }, + "enableCassandraConnector": { + "type": "bool", + "defaultValue": false, + "metadata": { + "description": "Enables the cassandra connector on the Cosmos DB CODE_OF_CONDUCT.md CONTRIBUTING.md account" + } + }, + "enableAnalyticalStorage": { + "type": "bool", + "defaultValue": false, + "metadata": { + "description": "Flag to indicate whether to enable storage analytics." + } + }, + "disableRateLimitingResponses": { + "type": "bool", + "defaultValue": false, + "metadata": { + "description": "Disable rate limiting on responses." + } + }, + "analyticalStorageConfiguration": { + "type": "string", + "defaultValue": "FullFidelity", + "allowedValues": [ + "FullFidelity", + "None" + ], + "metadata": { + "description": "Analytical storage specific properties." + } + }, + "serverVersion": { + "type": "string", + "defaultValue": "4.2", + "allowedValues": [ + "3.2", + "3.6", + "4.0", + "4.2" + ] + }, + "enableAggregationPipeline": { + "type": "bool", + "defaultValue": false, + "metadata": { + "description": "Enable Aggregation Pipeline" + } + }, + "enableMongoDBv34": { + "type": "bool", + "defaultValue": false, + "metadata": { + "description": "Enable MongoDBv34" + } + }, + "allowSelfServeUpgradeToMongo36": { + "type": "bool", + "defaultValue": false, + "metadata": { + "description": "Allow Self Serve Upgrade To Mongo36" + } + }, + "enablemongoEnableDocLevelTTL": { + "type": "bool", + "defaultValue": false, + "metadata": { + "description": "Enable mongoEnableDocLevelTTL" + } } }, "variables": { @@ -136,22 +243,869 @@ } }, "locations": "[union(createArray(createObject('locationName', parameters('location'), 'failoverPriority', 0, 'isZoneRedundant', parameters('isZoneRedundant'))), variables('secondaryRegions'))]", - "capabilities": "[union(if(parameters('enableCassandra'), createArray(createObject('name', 'EnableCassandra')), createArray()), if(parameters('enableServerless'), createArray(createObject('name', 'EnableServerless')), createArray()))]" + "capabilities": "[union(if(parameters('disableRateLimitingResponses'), createArray(createObject('name', 'DisableRateLimitingResponses')), createArray()), if(parameters('enableMongo'), createArray(createObject('name', 'EnableMongo')), createArray()), if(parameters('allowSelfServeUpgradeToMongo36'), createArray(createObject('name', 'AllowSelfServeUpgradeToMongo36')), createArray()), if(parameters('enableAggregationPipeline'), createArray(createObject('name', 'EnableAggregationPipeline')), createArray()), if(parameters('enableMongoDBv34'), createArray(createObject('name', 'MongoDBv34')), createArray()), if(parameters('enablemongoEnableDocLevelTTL'), createArray(createObject('name', 'mongoEnableDocLevelTTL')), createArray()), if(parameters('enableTable'), createArray(createObject('name', 'EnableTable')), createArray()), if(parameters('enableGremlin'), createArray(createObject('name', 'EnableGremlin')), createArray()), if(parameters('enableCassandra'), createArray(createObject('name', 'EnableCassandra')), createArray()), if(parameters('enableServerless'), createArray(createObject('name', 'EnableServerless')), createArray()))]" }, "resources": [ { - "type": "Microsoft.DocumentDB/databaseAccounts", - "apiVersion": "2022-05-15", - "name": "[toLower(parameters('name'))]", - "location": "[parameters('location')]", - "kind": "GlobalDocumentDB", + "type": "Microsoft.Resources/deployments", + "apiVersion": "2022-09-01", + "name": "deploy-cosmosdb", "properties": { - "consistencyPolicy": "[variables('consistencyPolicy')[parameters('defaultConsistencyLevel')]]", - "locations": "[variables('locations')]", - "databaseAccountOfferType": "Standard", - "enableAutomaticFailover": "[parameters('systemManagedFailover')]", - "enableMultipleWriteLocations": "[parameters('enableMultipleWriteLocations')]", - "capabilities": "[variables('capabilities')]" + "expressionEvaluationOptions": { + "scope": "inner" + }, + "mode": "Incremental", + "parameters": { + "name": { + "value": "[parameters('name')]" + }, + "location": { + "value": "[parameters('location')]" + }, + "properties": { + "value": { + "analyticalStorageConfiguration": "[if(parameters('enableAnalyticalStorage'), createObject('schemaType', parameters('analyticalStorageConfiguration')), null())]", + "apiProperties": "[if(parameters('enableMongo'), createObject('serverVersion', parameters('serverVersion')), null())]", + "databaseAccountOfferType": "Standard", + "locations": "[variables('locations')]", + "capabilities": "[variables('capabilities')]", + "consistencyPolicy": "[variables('consistencyPolicy')[parameters('defaultConsistencyLevel')]]", + "disableLocalAuth": "[parameters('disableLocalAuth')]", + "enableAnalyticalStorage": "[parameters('enableAnalyticalStorage')]", + "enableAutomaticFailover": "[parameters('systemManagedFailover')]", + "enableCassandraConnector": "[parameters('enableCassandraConnector')]", + "enableMultipleWriteLocations": "[parameters('enableMultipleWriteLocations')]", + "enablePartitionMerge": "[parameters('enablePartitionMerge')]" + } + } + }, + "template": { + "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#", + "languageVersion": "1.10-experimental", + "contentVersion": "1.0.0.0", + "metadata": { + "_EXPERIMENTAL_WARNING": "Symbolic name support in ARM is experimental, and should be enabled for testing purposes only. Do not enable this setting for any production usage, or you may be unexpectedly broken at any time!", + "_generator": { + "name": "bicep", + "version": "0.16.2.56959", + "templateHash": "4410539128391034453" + } + }, + "definitions": { + "CosmosDB": { + "type": "object", + "properties": { + "name": { + "$ref": "#/definitions/_name" + }, + "location": { + "$ref": "#/definitions/_location" + }, + "tags": { + "$ref": "#/definitions/_tags", + "nullable": true + }, + "kind": { + "$ref": "#/definitions/_kind", + "nullable": true + }, + "identity": { + "$ref": "#/definitions/_identity", + "nullable": true + }, + "properties": { + "$ref": "#/definitions/_properties" + } + } + }, + "_name": { + "type": "string", + "maxLength": 64, + "minLength": 3, + "metadata": { + "description": "The resource name." + } + }, + "_location": { + "type": "string", + "allowedValues": [ + "australiaeast", + "australiasoutheast", + "brazilsouth", + "canadacentral", + "canadaeast", + "centralindia", + "eastus", + "eastus2", + "francecentral", + "germanywestcentral", + "japaneast", + "japanwest", + "koreacentral", + "koreasouth", + "northeurope", + "norwayeast", + "southafricanorth", + "southeastasia", + "southindia", + "switzerlandnorth", + "uaenorth", + "uksouth", + "ukwest", + "westcentralus", + "westeurope", + "westindia", + "westus", + "westus2" + ], + "metadata": { + "description": "The location of the resource group to which the resource belongs." + } + }, + "_tag_key": { + "type": "string", + "maxLength": 128 + }, + "_tag_value": { + "type": "string", + "maxLength": 256 + }, + "_tags": { + "type": "array", + "items": { + "type": "object", + "properties": { + "key": { + "$ref": "#/definitions/_tag_key" + }, + "value": { + "$ref": "#/definitions/_tag_value" + } + } + }, + "maxLength": 15, + "metadata": { + "description": "Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with \"defaultExperience\": \"Cassandra\". Current \"defaultExperience\" values also include \"Table\", \"Graph\", \"DocumentDB\", and \"MongoDB\"." + } + }, + "_kind": { + "type": "string", + "allowedValues": [ + "GlobalDocumentDB", + "MongoDB", + "Parse" + ], + "metadata": { + "description": "Indicates the type of database account. This can only be set at database account creation." + } + }, + "_identity": { + "type": "object", + "properties": { + "type": { + "type": "string", + "allowedValues": [ + "SystemAssigned", + "SystemAssigned,UserAssigned", + "UserAssigned" + ] + }, + "userAssignedIdentities": { + "type": "object" + } + }, + "metadata": { + "description": "Identity for the resource." + } + }, + "_properties": { + "type": "object", + "properties": { + "analyticalStorageConfiguration": { + "$ref": "#/definitions/_analyticalStorageConfiguration", + "nullable": true + }, + "apiProperties": { + "$ref": "#/definitions/_apiProperties", + "nullable": true + }, + "backupPolicy": { + "$ref": "#/definitions/_backupPolicy", + "nullable": true + }, + "capabilities": { + "$ref": "#/definitions/_capabilities", + "nullable": true + }, + "capacity": { + "$ref": "#/definitions/_capacity", + "nullable": true + }, + "connectorOffer": { + "$ref": "#/definitions/_connectorOffer", + "nullable": true + }, + "consistencyPolicy": { + "$ref": "#/definitions/_consistencyPolicy", + "nullable": true + }, + "cors": { + "$ref": "#/definitions/_cors", + "nullable": true + }, + "createMode": { + "$ref": "#/definitions/_createMode", + "nullable": true + }, + "databaseAccountOfferType": { + "$ref": "#/definitions/_databaseAccountOfferType" + }, + "defaultIdentity": { + "$ref": "#/definitions/_defaultIdentity", + "nullable": true + }, + "disableKeyBasedMetadataWriteAccess": { + "$ref": "#/definitions/_disableKeyBasedMetadataWriteAccess", + "nullable": true + }, + "disableLocalAuth": { + "$ref": "#/definitions/_disableLocalAuth", + "nullable": true + }, + "enableAnalyticalStorage": { + "$ref": "#/definitions/_enableAnalyticalStorage", + "nullable": true + }, + "enableAutomaticFailover": { + "$ref": "#/definitions/_enableAutomaticFailover", + "nullable": true + }, + "enableCassandraConnector": { + "$ref": "#/definitions/_enableCassandraConnector", + "nullable": true + }, + "enableFreeTier": { + "$ref": "#/definitions/_enableFreeTier", + "nullable": true + }, + "enableMultipleWriteLocations": { + "$ref": "#/definitions/_enableMultipleWriteLocations", + "nullable": true + }, + "enablePartitionMerge": { + "$ref": "#/definitions/_enablePartitionMerge", + "nullable": true + }, + "ipRules": { + "$ref": "#/definitions/_ipRules", + "nullable": true + }, + "isVirtualNetworkFilterEnabled": { + "$ref": "#/definitions/_isVirtualNetworkFilterEnabled", + "nullable": true + }, + "keyVaultKeyUri": { + "$ref": "#/definitions/_keyVaultKeyUri", + "nullable": true + }, + "locations": { + "$ref": "#/definitions/_locations" + }, + "networkAclBypass": { + "$ref": "#/definitions/_networkAclBypass", + "nullable": true + }, + "networkAclBypassResourceIds": { + "$ref": "#/definitions/_networkAclBypassResourceIds", + "nullable": true + }, + "publicNetworkAccess": { + "$ref": "#/definitions/_publicNetworkAccess", + "nullable": true + }, + "restoreParameters": { + "$ref": "#/definitions/_restoreParameters", + "nullable": true + }, + "virtualNetworkRules": { + "$ref": "#/definitions/_virtualNetworkRules", + "nullable": true + } + }, + "metadata": { + "description": "Properties to create and update Azure Cosmos DB database accounts." + } + }, + "_analyticalStorageConfiguration": { + "type": "object", + "properties": { + "schemaType": { + "$ref": "#/definitions/_schemaType" + } + }, + "metadata": { + "description": "Analytical storage specific properties." + } + }, + "_schemaType": { + "type": "string", + "allowedValues": [ + "FullFidelity", + "WellDefined" + ], + "metadata": { + "description": "Describes the types of schema for analytical storage." + } + }, + "_apiProperties": { + "type": "object", + "properties": { + "serverVersion": { + "$ref": "#/definitions/_serverVersion" + } + }, + "metadata": { + "description": "API specific properties. Currently, supported only for MongoDB API." + } + }, + "_serverVersion": { + "type": "string", + "allowedValues": [ + "3.2", + "3.6", + "4.0", + "4.2" + ], + "metadata": { + "description": "Describes the ServerVersion of an a MongoDB account." + } + }, + "_backupPolicy": { + "type": "object", + "properties": { + "migrationState": { + "$ref": "#/definitions/_backupPolicyMigrationState", + "nullable": true + }, + "type": { + "type": "string" + } + }, + "metadata": { + "description": "The object representing the policy for taking backups on an account." + } + }, + "_startTime": { + "type": "string", + "metadata": { + "description": "Time at which the backup policy migration started (ISO-8601 format)." + } + }, + "_status": { + "type": "string", + "allowedValues": [ + "Completed", + "Failed", + "InProgress", + "Invalid", + null + ], + "nullable": true, + "metadata": { + "description": "Describes the status of migration between backup policy types." + } + }, + "_targetType": { + "type": "string", + "allowedValues": [ + "Continuous", + "Periodic" + ], + "metadata": { + "description": "Describes the target backup policy type of the backup policy migration." + } + }, + "_backupPolicyMigrationState": { + "type": "object", + "properties": { + "startTime": { + "$ref": "#/definitions/_startTime", + "nullable": true + }, + "status": { + "$ref": "#/definitions/_status" + }, + "targetType": { + "$ref": "#/definitions/_targetType", + "nullable": true + } + }, + "metadata": { + "description": "The object representing the state of the migration between the backup policies." + } + }, + "_capabilities": { + "type": "array", + "items": { + "$ref": "#/definitions/_capability" + }, + "metadata": { + "description": "List of Cosmos DB capabilities for the account" + } + }, + "_capability": { + "type": "object", + "properties": { + "name": { + "type": "string", + "allowedValues": [ + "AllowSelfServeUpgradeToMongo36", + "DisableRateLimitingResponses", + "EnableAggregationPipeline", + "EnableCassandra", + "EnableGremlin", + "EnableMongo", + "EnableServerless", + "EnableTable", + "MongoDBv3.4", + "mongoEnableDocLevelTTL" + ] + } + }, + "metadata": { + "description": "Name of the Cosmos DB capability. For example, \"name\": \"EnableCassandra\". Current values also include \"EnableTable\" and \"EnableGremlin\"." + } + }, + "_totalThroughputLimit": { + "type": "int", + "minValue": -1, + "metadata": { + "description": "The total throughput limit imposed on the account. A totalThroughputLimit of 2000 imposes a strict limit of max throughput that can be provisioned on that account to be 2000. A totalThroughputLimit of -1 indicates no limits on provisioning of throughput." + } + }, + "_capacity": { + "type": "object", + "properties": { + "totalThroughputLimit": { + "$ref": "#/definitions/_totalThroughputLimit" + } + }, + "metadata": { + "description": "The object that represents all properties related to capacity enforcement on an account." + } + }, + "_connectorOffer": { + "type": "string", + "allowedValues": [ + "Small" + ], + "metadata": { + "description": "The cassandra connector offer type for the Cosmos DB database CODE_OF_CONDUCT.md CONTRIBUTING.md account." + } + }, + "_defaultConsistencyLevel": { + "type": "string", + "allowedValues": [ + "BoundedStaleness", + "ConsistentPrefix", + "Eventual", + "Session", + "Strong" + ], + "metadata": { + "description": "The default consistency level and configuration settings of the Cosmos DB account." + } + }, + "_maxIntervalInSeconds": { + "type": "int", + "maxValue": 86400, + "minValue": 5, + "metadata": { + "description": "The maximum interval, in seconds, between requests when using the Bounded Staleness consistency level." + } + }, + "_maxStalenessPrefix": { + "type": "int", + "maxValue": 2147483647, + "minValue": 10, + "metadata": { + "description": "The maximum staleness prefix that can be used when using the Bounded Staleness consistency level." + } + }, + "_consistencyPolicy": { + "type": "object", + "properties": { + "defaultConsistencyLevel": { + "$ref": "#/definitions/_defaultConsistencyLevel" + }, + "maxIntervalInSeconds": { + "$ref": "#/definitions/_maxIntervalInSeconds", + "nullable": true + }, + "maxStalenessPrefix": { + "$ref": "#/definitions/_maxStalenessPrefix", + "nullable": true + } + }, + "metadata": { + "description": "The consistency policy for the Cosmos DB database account." + } + }, + "_cors": { + "type": "array", + "items": { + "type": "object", + "properties": { + "allowedHeaders": { + "type": "string", + "nullable": true + }, + "allowedMethods": { + "type": "string", + "nullable": true + }, + "allowedOrigins": { + "type": "string" + }, + "exposedHeaders": { + "type": "string", + "nullable": true + }, + "maxAgeInSeconds": { + "type": "int", + "nullable": true + } + } + }, + "metadata": { + "description": "The CORS policy for the Cosmos DB database account." + } + }, + "_createMode": { + "type": "string", + "allowedValues": [ + "Default", + "Restore" + ], + "metadata": { + "description": "Enum to indicate the mode of account creation." + } + }, + "_databaseAccountOfferType": { + "type": "string", + "allowedValues": [ + "Standard" + ], + "metadata": { + "description": "The offer type for the database. Required." + } + }, + "_defaultIdentity": { + "type": "string", + "allowedValues": [ + "FirstPartyIdentity", + "SystemAssignedIdentity" + ], + "metadata": { + "description": "The default identity for accessing key vault used in features like customer managed keys. The default identity needs to be explicitly set by the users. It can be \"FirstPartyIdentity\", \"SystemAssignedIdentity\" and more." + } + }, + "_disableKeyBasedMetadataWriteAccess": { + "type": "bool", + "metadata": { + "description": "Disable write operations on metadata resources (databases, containers, throughput) via account keys" + } + }, + "_disableLocalAuth": { + "type": "bool", + "metadata": { + "description": "Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication." + } + }, + "_enableAnalyticalStorage": { + "type": "bool", + "metadata": { + "description": "Flag to indicate whether to enable storage analytics." + } + }, + "_enableAutomaticFailover": { + "type": "bool", + "metadata": { + "description": "Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account." + } + }, + "_enableCassandraConnector": { + "type": "bool", + "metadata": { + "description": "Enables the cassandra connector on the Cosmos DB CODE_OF_CONDUCT.md CONTRIBUTING.md account" + } + }, + "_enableFreeTier": { + "type": "bool", + "metadata": { + "description": "Flag to indicate whether Free Tier is enabled." + } + }, + "_enableMultipleWriteLocations": { + "type": "bool", + "metadata": { + "description": "Enables the account to write in multiple locations" + } + }, + "_enablePartitionMerge": { + "type": "bool", + "metadata": { + "description": "Flag to indicate enabling/disabling of Partition Merge feature on the account" + } + }, + "_ipRules": { + "type": "array", + "items": { + "type": "object", + "properties": { + "ipAddressOrRange": { + "$ref": "#/definitions/_ipAddressOrRange" + } + } + }, + "metadata": { + "description": "List of IpRules." + } + }, + "_ipAddressOrRange": { + "type": "string", + "metadata": { + "description": "A single IPv4 address or a single IPv4 address range in CIDR format. Provided IPs must be well-formatted and cannot be contained in one of the following ranges: 10.0.0.0/8, 100.64.0.0/10, 172.16.0.0/12, 192.168.0.0/16, since these are not enforceable by the IP address filter. Example of valid inputs: “23.40.210.245” or “23.40.210.0/8”." + } + }, + "_isVirtualNetworkFilterEnabled": { + "type": "bool", + "metadata": { + "description": "Flag to indicate whether to enable/disable Virtual Network ACL rules." + } + }, + "_keyVaultKeyUri": { + "type": "string", + "metadata": { + "description": "The URI of the key vault" + } + }, + "_locations": { + "type": "array", + "items": { + "type": "object", + "properties": { + "failoverPriority": { + "$ref": "#/definitions/_failoverPriority" + }, + "isZoneRedundant": { + "$ref": "#/definitions/_isZoneRedundant" + }, + "locationName": { + "$ref": "#/definitions/_locationName" + } + } + }, + "minLength": 1, + "metadata": { + "description": "An array that contains the georeplication locations enabled for the Cosmos DB account. Required." + } + }, + "_failoverPriority": { + "type": "int", + "metadata": { + "description": "The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists." + } + }, + "_isZoneRedundant": { + "type": "bool", + "metadata": { + "description": "Flag to indicate whether or not this region is an AvailabilityZone region" + } + }, + "_locationName": { + "$ref": "#/definitions/_location", + "metadata": { + "description": "The name of the region." + } + }, + "_networkAclBypass": { + "type": "string", + "allowedValues": [ + "AzureServices", + "None" + ], + "metadata": { + "description": "Indicates what services are allowed to bypass firewall checks." + } + }, + "_networkAclBypassResourceIds": { + "type": "array", + "items": { + "type": "string" + }, + "metadata": { + "description": "An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account." + } + }, + "_publicNetworkAccess": { + "type": "string", + "allowedValues": [ + "Disabled", + "Enabled" + ], + "metadata": { + "description": "Whether requests from Public Network are allowed" + } + }, + "_restoreParameters": { + "type": "object", + "properties": { + "databasesToRestore": { + "type": "array", + "items": { + "$ref": "#/definitions/_databasesToRestore" + }, + "nullable": true + }, + "restoreMode": { + "$ref": "#/definitions/_restoreMode", + "nullable": true + }, + "restoreSource": { + "$ref": "#/definitions/_restoreSource", + "nullable": true + }, + "restoreTimestampInUtc": { + "$ref": "#/definitions/_restoreTimestampInUtc", + "nullable": true + } + }, + "metadata": { + "description": "Parameters to indicate the information about the restore." + } + }, + "_databasesToRestore": { + "type": "array", + "items": { + "type": "object", + "properties": { + "collectionNames": { + "type": "array", + "items": { + "$ref": "#/definitions/_collectionNames" + }, + "nullable": true + }, + "databaseName": { + "$ref": "#/definitions/_databaseName", + "nullable": true + } + } + }, + "metadata": { + "description": "List of Virtual Network ACL rules configured for the Cosmos DB account." + } + }, + "_collectionNames": { + "type": "string", + "metadata": { + "description": "The names of the collections available for restore." + } + }, + "_databaseName": { + "type": "string", + "metadata": { + "description": "The name of the database available for restore." + } + }, + "_restoreMode": { + "type": "string", + "allowedValues": [ + "PointInTime" + ], + "metadata": { + "description": "Describes the mode of the restore." + } + }, + "_restoreSource": { + "type": "string", + "metadata": { + "description": "The id of the restorable database account from which the restore has to be initiated. For example: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{restorableDatabaseAccountName}" + } + }, + "_restoreTimestampInUtc": { + "type": "string", + "metadata": { + "description": "Time to which the account has to be restored (ISO-8601 format)." + } + }, + "_virtualNetworkRules": { + "type": "array", + "items": { + "type": "object", + "properties": { + "id": { + "$ref": "#/definitions/_id" + }, + "ignoreMissingVNetServiceEndpoint": { + "$ref": "#/definitions/_ignoreMissingVNetServiceEndpoint" + } + } + }, + "metadata": { + "description": "List of Virtual Network ACL rules configured for the Cosmos DB account." + } + }, + "_id": { + "type": "string", + "metadata": { + "description": "Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}." + } + }, + "_ignoreMissingVNetServiceEndpoint": { + "type": "bool", + "metadata": { + "description": "Create firewall rule before the virtual network has vnet service endpoint enabled." + } + } + }, + "parameters": { + "name": { + "$ref": "#/definitions/_name" + }, + "location": { + "$ref": "#/definitions/_location" + }, + "kind": { + "$ref": "#/definitions/_kind", + "defaultValue": "GlobalDocumentDB" + }, + "properties": { + "$ref": "#/definitions/_properties" + } + }, + "resources": { + "cosmosDB": { + "type": "Microsoft.DocumentDB/databaseAccounts", + "apiVersion": "2022-05-15", + "name": "[parameters('name')]", + "location": "[parameters('location')]", + "kind": "[parameters('kind')]", + "properties": "[parameters('properties')]" + } + }, + "outputs": { + "id": { + "type": "string", + "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('name'))]" + }, + "name": { + "$ref": "#/definitions/_name", + "value": "[parameters('name')]" + } + } + } } } ], @@ -161,14 +1115,14 @@ "metadata": { "description": "Cosmos DB Resource ID" }, - "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts', toLower(parameters('name')))]" + "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-cosmosdb'), '2022-09-01').outputs.id.value]" }, "name": { "type": "string", "metadata": { "description": "Cosmos DB Resource Name" }, - "value": "[toLower(parameters('name'))]" + "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploy-cosmosdb'), '2022-09-01').outputs.name.value]" } } } \ No newline at end of file
diff --git a/modules/storage/cosmos-db/module/bicepconfig.json b/modules/storage/cosmos-db/module/bicepconfig.json new file mode 100644 index 00000000..9fefc866 --- /dev/null +++ b/modules/storage/cosmos-db/module/bicepconfig.json @@ -0,0 +1,6 @@
    +{ + "experimentalFeaturesEnabled": { + "userDefinedTypes": true, + "extensibility": true + } + }
diff --git a/modules/storage/cosmos-db/module/cosmos.bicep b/modules/storage/cosmos-db/module/cosmos.bicep new file mode 100644 index 00000000..3f9a27a5 --- /dev/null +++ b/modules/storage/cosmos-db/module/cosmos.bicep @@ -0,0 +1,286 @@
    +param name _name +param location _location +param kind _kind = 'GlobalDocumentDB' +param properties _properties + +resource cosmosDB 'Microsoft.DocumentDB/databaseAccounts@2022-05-15' = { + name: name + location: location + kind: kind + properties: properties +} + +output id string = cosmosDB.id +output name _name = cosmosDB.name + +type CosmosDB = { + name: _name + location: _location + tags: _tags? + kind: _kind? + identity: _identity? + properties: _properties +} + +@description('The resource name.') +@minLength(3) +@maxLength(64) +type _name = string + +@description('The location of the resource group to which the resource belongs.') +type _location = 'eastus' | 'eastus2' | 'westus' | 'westus2' | 'westcentralus' | 'westeurope' | 'southeastasia' | 'northeurope' | 'uksouth' | 'ukwest' | 'australiaeast' | 'australiasoutheast' | 'brazilsouth' | 'southindia' | 'centralindia' | 'westindia' | 'canadacentral' | 'canadaeast' | 'japaneast' | 'japanwest' | 'koreacentral' | 'koreasouth' | 'francecentral' | 'southafricanorth' | 'uaenorth' | 'switzerlandnorth' | 'germanywestcentral' | 'norwayeast' + +@maxLength(128) +type _tag_key = string + +@maxLength(256) +type _tag_value = string + +@description('Tags are a list of key-value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters. For example, the default experience for a template type is set with "defaultExperience": "Cassandra". Current "defaultExperience" values also include "Table", "Graph", "DocumentDB", and "MongoDB".') +@maxLength(15) +type _tags = { + 'key': _tag_key + 'value': _tag_value +}[] + +@description('Indicates the type of database account. This can only be set at database account creation.') +type _kind = 'GlobalDocumentDB' | 'MongoDB' | 'Parse' + +@description('Identity for the resource.') +type _identity = { + type: 'SystemAssigned' | 'UserAssigned' | 'SystemAssigned,UserAssigned' + userAssignedIdentities: object +} + +@description('Properties to create and update Azure Cosmos DB database accounts.') +type _properties = { + analyticalStorageConfiguration: _analyticalStorageConfiguration? + apiProperties: _apiProperties? + backupPolicy: _backupPolicy? + capabilities: _capabilities? + capacity: _capacity? + connectorOffer: _connectorOffer? + consistencyPolicy: _consistencyPolicy? + cors: _cors? + createMode: _createMode? + databaseAccountOfferType: _databaseAccountOfferType + defaultIdentity: _defaultIdentity? + disableKeyBasedMetadataWriteAccess: _disableKeyBasedMetadataWriteAccess? + disableLocalAuth: _disableLocalAuth? + enableAnalyticalStorage: _enableAnalyticalStorage? + enableAutomaticFailover: _enableAutomaticFailover? + enableCassandraConnector: _enableCassandraConnector? + enableFreeTier: _enableFreeTier? + enableMultipleWriteLocations: _enableMultipleWriteLocations? + enablePartitionMerge: _enablePartitionMerge? + ipRules: _ipRules? + isVirtualNetworkFilterEnabled: _isVirtualNetworkFilterEnabled? + keyVaultKeyUri: _keyVaultKeyUri? + locations: _locations + networkAclBypass: _networkAclBypass? + networkAclBypassResourceIds: _networkAclBypassResourceIds? + publicNetworkAccess: _publicNetworkAccess? + restoreParameters: _restoreParameters? + virtualNetworkRules: _virtualNetworkRules? +} + +@description('Analytical storage specific properties.') +type _analyticalStorageConfiguration = { + schemaType: _schemaType +} + +@description('Describes the types of schema for analytical storage.') +type _schemaType = 'FullFidelity' | 'WellDefined' + +@description('API specific properties. Currently, supported only for MongoDB API.') +type _apiProperties = { + serverVersion: _serverVersion +} + +@description('Describes the ServerVersion of an a MongoDB account.') +type _serverVersion = '3.2' | '3.6' | '4.0' | '4.2' + +@description('The object representing the policy for taking backups on an account.') +type _backupPolicy = { + migrationState: _backupPolicyMigrationState? + type: string +} + +@description('Time at which the backup policy migration started (ISO-8601 format).') +type _startTime = string + +@description('Describes the status of migration between backup policy types.') +type _status = 'Completed' | 'Failed' | 'InProgress' | 'Invalid'? + +@description('Describes the target backup policy type of the backup policy migration.') +type _targetType = 'Continuous' | 'Periodic' + +@description('The object representing the state of the migration between the backup policies.') +type _backupPolicyMigrationState = { + startTime: _startTime? + status: _status + targetType: _targetType? +} + +@description('List of Cosmos DB capabilities for the account') +type _capabilities = _capability[] + +@description('Name of the Cosmos DB capability. For example, "name": "EnableCassandra". Current values also include "EnableTable" and "EnableGremlin".') +type _capability = { + name: 'EnableCassandra' | 'EnableServerless' | 'EnableTable' | 'EnableGremlin' | 'EnableMongo' | 'DisableRateLimitingResponses' | 'AllowSelfServeUpgradeToMongo36' | 'EnableAggregationPipeline' | 'MongoDBv3.4' | 'mongoEnableDocLevelTTL' +} + +@description('The total throughput limit imposed on the account. A totalThroughputLimit of 2000 imposes a strict limit of max throughput that can be provisioned on that account to be 2000. A totalThroughputLimit of -1 indicates no limits on provisioning of throughput.') +@minValue(-1) +type _totalThroughputLimit = int + +@description('The object that represents all properties related to capacity enforcement on an account.') +type _capacity = { + totalThroughputLimit: _totalThroughputLimit +} + +@description('The cassandra connector offer type for the Cosmos DB database CODE_OF_CONDUCT.md CONTRIBUTING.md account.') +type _connectorOffer = 'Small' + +@description('The default consistency level and configuration settings of the Cosmos DB account.') +type _defaultConsistencyLevel = 'BoundedStaleness' | 'ConsistentPrefix' | 'Eventual' | 'Session' | 'Strong' + +@description('The maximum interval, in seconds, between requests when using the Bounded Staleness consistency level.') +@minValue(5) +@maxValue(86400) +type _maxIntervalInSeconds = int + +@description('The maximum staleness prefix that can be used when using the Bounded Staleness consistency level.') +@minValue(10) +@maxValue(2147483647) +type _maxStalenessPrefix = int + +@description('The consistency policy for the Cosmos DB database account.') +type _consistencyPolicy = { + defaultConsistencyLevel: _defaultConsistencyLevel + maxIntervalInSeconds: _maxIntervalInSeconds? + maxStalenessPrefix: _maxStalenessPrefix? +} + +@description('The CORS policy for the Cosmos DB database account.') +type _cors = { + allowedHeaders: string? + allowedMethods: string? + allowedOrigins: string + exposedHeaders: string? + maxAgeInSeconds: int? +}[] + +@description('Enum to indicate the mode of account creation.') +type _createMode = 'Default' | 'Restore' + +@description('The offer type for the database. Required.') +type _databaseAccountOfferType = 'Standard' + +@description('The default identity for accessing key vault used in features like customer managed keys. The default identity needs to be explicitly set by the users. It can be "FirstPartyIdentity", "SystemAssignedIdentity" and more.') +type _defaultIdentity = 'SystemAssignedIdentity' | 'FirstPartyIdentity' + +@description('Disable write operations on metadata resources (databases, containers, throughput) via account keys') +type _disableKeyBasedMetadataWriteAccess = bool + +@description('Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.') +type _disableLocalAuth = bool + +@description('Flag to indicate whether to enable storage analytics.') +type _enableAnalyticalStorage = bool + +@description('Enables automatic failover of the write region in the rare event that the region is unavailable due to an outage. Automatic failover will result in a new write region for the account and is chosen based on the failover priorities configured for the account.') +type _enableAutomaticFailover = bool + +@description('Enables the cassandra connector on the Cosmos DB CODE_OF_CONDUCT.md CONTRIBUTING.md account') +type _enableCassandraConnector = bool + +@description('Flag to indicate whether Free Tier is enabled.') +type _enableFreeTier = bool + +@description('Enables the account to write in multiple locations') +type _enableMultipleWriteLocations = bool + +@description('Flag to indicate enabling/disabling of Partition Merge feature on the account') +type _enablePartitionMerge = bool + +@description('List of IpRules.') +type _ipRules = { + ipAddressOrRange: _ipAddressOrRange +}[] + +@description('A single IPv4 address or a single IPv4 address range in CIDR format. Provided IPs must be well-formatted and cannot be contained in one of the following ranges: 10.0.0.0/8, 100.64.0.0/10, 172.16.0.0/12, 192.168.0.0/16, since these are not enforceable by the IP address filter. Example of valid inputs: “23.40.210.245” or “23.40.210.0/8”.') +type _ipAddressOrRange = string + +@description('Flag to indicate whether to enable/disable Virtual Network ACL rules.') +type _isVirtualNetworkFilterEnabled = bool + +@description('The URI of the key vault') +type _keyVaultKeyUri = string + +@description('An array that contains the georeplication locations enabled for the Cosmos DB account. Required.') +@minLength(1) +type _locations = { + failoverPriority: _failoverPriority + isZoneRedundant: _isZoneRedundant + locationName: _locationName +}[] + +@description('The failover priority of the region. A failover priority of 0 indicates a write region. The maximum value for a failover priority = (total number of regions - 1). Failover priority values must be unique for each of the regions in which the database account exists.') +type _failoverPriority = int + +@description('Flag to indicate whether or not this region is an AvailabilityZone region') +type _isZoneRedundant = bool + +@description('The name of the region.') +type _locationName = _location + +@description('Indicates what services are allowed to bypass firewall checks.') +type _networkAclBypass = 'AzureServices' | 'None' + +@description('An array that contains the Resource Ids for Network Acl Bypass for the Cosmos DB account.') +type _networkAclBypassResourceIds = string[] + +@description('Whether requests from Public Network are allowed') +type _publicNetworkAccess = 'Enabled' | 'Disabled' + +@description('Parameters to indicate the information about the restore.') +type _restoreParameters = { + databasesToRestore: _databasesToRestore[]? + restoreMode: _restoreMode? + restoreSource: _restoreSource? + restoreTimestampInUtc: _restoreTimestampInUtc? +} + +@description('List of Virtual Network ACL rules configured for the Cosmos DB account.') +type _databasesToRestore = { + collectionNames: _collectionNames[]? + databaseName: _databaseName? +}[] + +@description('The names of the collections available for restore.') +type _collectionNames = string + +@description('The name of the database available for restore.') +type _databaseName = string + +@description('Describes the mode of the restore.') +type _restoreMode = 'PointInTime' + +@description('The id of the restorable database account from which the restore has to be initiated. For example: /subscriptions/{subscriptionId}/providers/Microsoft.DocumentDB/locations/{location}/restorableDatabaseAccounts/{restorableDatabaseAccountName}') +type _restoreSource = string + +@description('Time to which the account has to be restored (ISO-8601 format).') +type _restoreTimestampInUtc = string + +@description('List of Virtual Network ACL rules configured for the Cosmos DB account.') +type _virtualNetworkRules = { + id: _id + ignoreMissingVNetServiceEndpoint: _ignoreMissingVNetServiceEndpoint +}[] + +@description('Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}.') +type _id = string + +@description('Create firewall rule before the virtual network has vnet service endpoint enabled.') +type _ignoreMissingVNetServiceEndpoint = bool
diff --git a/modules/storage/cosmos-db/version.json b/modules/storage/cosmos-db/version.json index e40897e2..4727c648 100644 --- a/modules/storage/cosmos-db/version.json +++ b/modules/storage/cosmos-db/version.json @@ -1,6 +1,6 @@
    { "$schema": "https://aka.ms/bicep-registry-module-version-file-schema#", - "version": "1.0", + "version": "2.0", "pathFilters": [ "./main.json", "./metadata.json"

***

From 2dc230b8d4ad597f3700b23020f7a4b7edf71365 Mon Sep 17 00:00:00 2001
From: Daniel Ciborowski <dciborow@microsoft.com> Date: Wed, 12 Apr 2023 16:10:17 +0000
Subject: [PATCH 2/3] fix static analysis issues
---
modules/storage/cosmos-db/README.md | 2 +-
modules/storage/cosmos-db/main.bicep | 1 +
modules/storage/cosmos-db/main.json | 7 +++++--
modules/storage/cosmos-db/test/main.test.bicep | 8 ++++++--
4 files changed, 13 insertions(+), 5 deletions(-)
diff --git a/modules/storage/cosmos-db/README.md b/modules/storage/cosmos-db/README.md index 1c4e584b..9bce93f6 100644 --- a/modules/storage/cosmos-db/README.md +++ b/modules/storage/cosmos-db/README.md @@ -32,7 +32,7 @@ It allows for the creation of a new Cosmos DB account or use of an existing one, | `enableAnalyticalStorage` | `bool` | No | Flag to indicate whether to enable storage analytics. | | `disableRateLimitingResponses` | `bool` | No | Disable rate limiting on responses. | | `analyticalStorageConfiguration` | `string` | No | Analytical storage specific properties. | -| `serverVersion` | `string` | No | | +| `serverVersion` | `string` | No | API specific properties. Currently, supported only for MongoDB API. | | `enableAggregationPipeline` | `bool` | No | Enable Aggregation Pipeline | | `enableMongoDBv34` | `bool` | No | Enable MongoDBv34 | | `allowSelfServeUpgradeToMongo36` | `bool` | No | Allow Self Serve Upgrade To Mongo36 |
diff --git a/modules/storage/cosmos-db/main.bicep b/modules/storage/cosmos-db/main.bicep index eb2adcfd..8b8f073d 100644 --- a/modules/storage/cosmos-db/main.bicep +++ b/modules/storage/cosmos-db/main.bicep @@ -69,6 +69,7 @@ param disableRateLimitingResponses bool = false @allowed([ 'FullFidelity', 'None' ]) param analyticalStorageConfiguration string = 'FullFidelity' +@description('API specific properties. Currently, supported only for MongoDB API.') @allowed([ '3.2', '3.6', '4.0', '4.2']) param serverVersion string = '4.2'
diff --git a/modules/storage/cosmos-db/main.json b/modules/storage/cosmos-db/main.json index 214878a5..d87d236b 100644 --- a/modules/storage/cosmos-db/main.json +++ b/modules/storage/cosmos-db/main.json @@ -5,7 +5,7 @@ "_generator": { "name": "bicep", "version": "0.16.2.56959", - "templateHash": "2014006192790443516" + "templateHash": "11367073346350573661" } }, "parameters": { @@ -180,7 +180,10 @@ "3.6", "4.0", "4.2" - ] + ], + "metadata": { + "description": "API specific properties. Currently, supported only for MongoDB API." + } }, "enableAggregationPipeline": { "type": "bool",
diff --git a/modules/storage/cosmos-db/test/main.test.bicep b/modules/storage/cosmos-db/test/main.test.bicep index 38998ce2..89f6f706 100644 --- a/modules/storage/cosmos-db/test/main.test.bicep +++ b/modules/storage/cosmos-db/test/main.test.bicep @@ -3,8 +3,12 @@ Write deployment tests in this file. Any module that references the main module file is a deployment test. Make sure at least one test is added. docs/ modules/ scripts/ param location string = resourceGroup().location -param name string = 'mycosmosdb${uniqueString(resourceGroup().id, location)}' -param cassandra_name string = 'mycassandradb${uniqueString(resourceGroup().id, location)}' +@minLength(3) +@maxLength(64) +param name string = take('mycosmosdb${uniqueString(resourceGroup().id, location)}', 64) +@minLength(3) +@maxLength(64) +param cassandra_name string = take('mycassandradb${uniqueString(resourceGroup().id, location)}', 64) // Prerequisites // module prereq 'prereq.test.bicep' = {
"""

# review = ""
# # for pr_patch_chunk in chunks(PR_PATCH, 3000):
# for pr_patch_chunk in splits(PR_PATCH):
#     prompt = f"""
#     Each patch entry has the commit message in the Subject line followed by the code changes (diffs) in a unidiff format.

#     Act as a code reviewer of a Pull Request, providing feedback on the code changes below. You are provided with the Pull Request changes in a patch format.

#     Patch of the Pull Request to review:

#     {pr_patch_chunk}

#     As a code reviewer, your task is:
#     - Review the code changes (diffs) and provide feedback.
#     - If there are any bugs, highlight them.
#     - Do not highlight minor issues and nitpicks.
#     - View this as one pull request and don't mention individual patches.
#     - Look out for typos in repeating variables.
#     - Use markdown formatting.
#     - Use bullet points if you have multiple comments.
#     """

#     response = call_gpt(prompt)
#     print(response)
#     review += response + "\n\n"

# prompt = f"""
#     Remove redudancies in these reviews.
#     Remeber to:
#     - Use markdown formatting.
#     - Use bullet points for multiple comments.

#     Reviews:
#     {review}

#     """
# response = call_gpt(prompt)
# print(response)


def get_pr_files(pr_patch):
    files = ""
    for pr_patch_chunk in pr_patch.split("***"):
        prompt = f"""
        What files were changed in this command?
        {pr_patch_chunk.split("diff --git")[0]}
        """
        response = call_gpt(prompt)
        files += response

    prompt = f"""
        Merge the lists of files changed in this lists.
        {files}
    """
    response = call_gpt(prompt)
    return response


def summarize_pr_files(pr_patch):
    files = ""
    for pr_patch_chunk in pr_patch.split("***"):
        prompt = f"""
Create a detailed desciption of the changes from this Pull Request.
- List a detailed description of the changes made to each file using bullets in markdown format.
- use the format `- <fileName>: <descriptionOfChanges>`
{pr_patch_chunk.split("diff --git")[0]}


Here is an example of a good changelog.
```markdown
- module/cosmos.bicep: Added to define user-defined types for Cosmos DB
```
"""
        response = call_gpt(prompt)
        files += response + "\n\n"

    prompt = f"""
Improve the presentation of these changenotes.
{files}
"""
    response = call_gpt(prompt)
    print(response)
    return response


def detect_pr_bugs(pr_patch):
    files = ""
    for pr_patch_chunk in pr_patch.split("***"):
        prompt = f"""
Create a list of detailed desciption of the changes from this Pull Request of the bugs that may occur because of changes made to code.

{pr_patch_chunk.split("diff --git")[0]}
"""
        response = call_gpt(prompt)
        files += response + "\n\n"

    prompt = f"""
Improve the presentation of this changelog.

```markdown
{files}
```

"""
    response = call_gpt(prompt)
    print(response)
    return response


def create_summary():
    prompt = f"""
    Improve the presentation of these changenotes.
    - use this format for the 'Summary of Changes by File' list: `- <fileName>: <descriptionOfChanges>`

    ```markdown
    # Changenotes
    ## Summary of Changes by File
    {summarize_pr_files(PR_PATCH)}

    ## Bugs to Consider
    {detect_pr_bugs(PR_PATCH)}
    ```

    """
    response = call_gpt(prompt)
    print(f"\n\nChange Notes\n\n{response}")
    return response


def summarize_test_coverage():
    prompt = """
Explain if the changes made to main.bicep are tested by test.main.bicep? If not, explain what tests should be added to test.main.bicep to complete the test coverage.
Do not worry about the validity of new parameters or values, minLength, or maxLegnth.
List each parameter that needs to be verified using bullets in markdown format.

GitHub Changes
- main.bicep -5,7 +5,9 @@ param location string param prefix string = enableCassandra ? 'coscas' : 'cosmos' @description('Name of Cosmos DB Resource') -param name string = '${prefix}${uniqueString(resourceGroup().id, location)}' +@minLength(3) +@maxLength(64) +param name string = take('${prefix}${uniqueString(resourceGroup().id, location)}', 64) @description('Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 2147483647. Multi Region: 100000 to 2147483647.') @minValue(10) @@ -33,12 +35,55 @@ param enableMultipleWriteLocations bool = true @description('Enable Cassandra Backend.') param enableCassandra bool = false +@description('Enable Gremlin API.') +param enableGremlin bool = false + @description('Enable Serverless for consumption-based usage.') param enableServerless bool = false +@description('Enable Table API.') +param enableTable bool = false + +@description('Enable Mongo API.') +param enableMongo bool = false || enableMongoDBv34 || allowSelfServeUpgradeToMongo36 || enablemongoEnableDocLevelTTL + @description('Toggle to enable or disable zone redudance.') param isZoneRedundant bool = false +@description('Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.') +param disableLocalAuth bool = false + +@description('Flag to indicate enabling/disabling of Partition Merge feature on the account') +param enablePartitionMerge bool = false + +@description('Enables the cassandra connector on the Cosmos DB CODE_OF_CONDUCT.md CONTRIBUTING.md account') +param enableCassandraConnector bool = false + +@description('Flag to indicate whether to enable storage analytics.') +param enableAnalyticalStorage bool = false + +@description('Disable rate limiting on responses.') +param disableRateLimitingResponses bool = false + +@description('Analytical storage specific properties.') +@allowed([ 'FullFidelity', 'None' ]) +param analyticalStorageConfiguration string = 'FullFidelity' + +@allowed([ '3.2', '3.6', '4.0', '4.2']) +param serverVersion string = '4.2' + +@description('Enable Aggregation Pipeline') +param enableAggregationPipeline bool = false + +@description('Enable MongoDBv34') +param enableMongoDBv34 bool = false + +@description('Allow Self Serve Upgrade To Mongo36') +param allowSelfServeUpgradeToMongo36 bool = false + +@description('Enable mongoEnableDocLevelTTL') +param enablemongoEnableDocLevelTTL bool = false + var consistencyPolicy = { Eventual: { defaultConsistencyLevel: 'Eventual' @@ -65,6 +110,7 @@ var secondaryRegions = [for (region, i) in secondaryLocations: { isZoneRedundant: contains(region, 'isZoneRedundant') ? region.isZoneRedundant : isZoneRedundant }] +#disable-next-line BCP334 var locations = union([ { locationName: location @@ -72,28 +118,48 @@ var locations = union([ isZoneRedundant: isZoneRedundant } ], secondaryRegions) - var capabilities = union( + disableRateLimitingResponses ? [ { name: 'DisableRateLimitingResponses' } ] : [], + enableMongo ? [ { name: 'EnableMongo' } ] : [], + allowSelfServeUpgradeToMongo36 ? [ { name: 'AllowSelfServeUpgradeToMongo36' } ] : [], + enableAggregationPipeline ? [ { name: 'EnableAggregationPipeline' } ] : [], + enableMongoDBv34 ? [ { name: 'MongoDBv34' } ] : [], + enablemongoEnableDocLevelTTL ? [ { name: 'mongoEnableDocLevelTTL' } ] : [], + enableTable ? [ { name: 'EnableTable' } ] : [], + enableGremlin ? [ { name: 'EnableGremlin' } ] : [], enableCassandra ? [ { name: 'EnableCassandra' } ] : [], enableServerless ? [ { name: 'EnableServerless' } ] : [] ) -resource cosmosDB 'Microsoft.DocumentDB/databaseAccounts@2022-05-15' = { - name: toLower(name) - location: location - kind: 'GlobalDocumentDB' - properties: { - consistencyPolicy: consistencyPolicy[defaultConsistencyLevel] - locations: locations - databaseAccountOfferType: 'Standard' - enableAutomaticFailover: systemManagedFailover - enableMultipleWriteLocations: enableMultipleWriteLocations - capabilities: capabilities +module cosmosDB 'module/cosmos.bicep' = { + name: 'deploy-cosmosdb' + params: { + name: name + location: location + properties: { + analyticalStorageConfiguration: enableAnalyticalStorage ? { + schemaType: analyticalStorageConfiguration + } : null + apiProperties: enableMongo ? { + serverVersion: serverVersion + }: null + databaseAccountOfferType: 'Standard' + locations: locations + capabilities: capabilities + consistencyPolicy: consistencyPolicy[defaultConsistencyLevel] + disableLocalAuth: disableLocalAuth + enableAnalyticalStorage: enableAnalyticalStorage + enableAutomaticFailover: systemManagedFailover + enableCassandraConnector: enableCassandraConnector + enableMultipleWriteLocations: enableMultipleWriteLocations + enablePartitionMerge: enablePartitionMerge + + } } } @description('Cosmos DB Resource ID') -output id string = cosmosDB.id +output id string = cosmosDB.outputs.id @description('Cosmos DB Resource Name') -output name string = cosmosDB.name +output name string = cosmosDB.outputs.name
- main.bicep -69,6 +69,7 @@ param disableRateLimitingResponses bool = false @allowed([ 'FullFidelity', 'None' ]) param analyticalStorageConfiguration string = 'FullFidelity' +@description('API specific properties. Currently, supported only for MongoDB API.') @allowed([ '3.2', '3.6', '4.0', '4.2']) param serverVersion string = '4.2'
- main.test.bicep -3,8 +3,12 @@ Write deployment tests in this file. Any module that references the main module file is a deployment test. Make sure at least one test is added. docs/ modules/ scripts/ param location string = resourceGroup().location -param name string = 'mycosmosdb${uniqueString(resourceGroup().id, location)}' -param cassandra_name string = 'mycassandradb${uniqueString(resourceGroup().id, location)}' +@minLength(3) +@maxLength(64) +param name string = take('mycosmosdb${uniqueString(resourceGroup().id, location)}', 64) +@minLength(3) +@maxLength(64) +param cassandra_name string = take('mycassandradb${uniqueString(resourceGroup().id, location)}', 64) // Prerequisites // module prereq 'prereq.test.bicep' = {

Do not start your responce with 'No, ' or 'Yes, ', start with 'The changes made...'
"""

    response = call_gpt(prompt)
    print(response)
    return response


def create_better_summary():
    summary = f"""

    ```markdown
    # Changenotes
    ## Summary of Changes by File
    {summarize_pr_files(PR_PATCH)}

    ## Test Coverage
    {summarize_test_coverage()}

    ## Bugs to Consider
    {detect_pr_bugs(PR_PATCH)}
    ```

    """
    print(summary)
    return summary


def generate_tests():
    prompt = """
    Determine if the changes made to main.bicep are tested by test.main.bicep and create new Bicep tests like the ones in main.test.bicep to complete the test coverage.
    Do not worry about minLength and maxLength. They are not required for the test coverage.

    GitHub Changes
    - main.bicep -5,7 +5,9 @@ param location string param prefix string = enableCassandra ? 'coscas' : 'cosmos' @description('Name of Cosmos DB Resource') -param name string = '${prefix}${uniqueString(resourceGroup().id, location)}' +@minLength(3) +@maxLength(64) +param name string = take('${prefix}${uniqueString(resourceGroup().id, location)}', 64) @description('Max stale requests. Required for BoundedStaleness. Valid ranges, Single Region: 10 to 2147483647. Multi Region: 100000 to 2147483647.') @minValue(10) @@ -33,12 +35,55 @@ param enableMultipleWriteLocations bool = true @description('Enable Cassandra Backend.') param enableCassandra bool = false +@description('Enable Gremlin API.') +param enableGremlin bool = false + @description('Enable Serverless for consumption-based usage.') param enableServerless bool = false +@description('Enable Table API.') +param enableTable bool = false + +@description('Enable Mongo API.') +param enableMongo bool = false || enableMongoDBv34 || allowSelfServeUpgradeToMongo36 || enablemongoEnableDocLevelTTL + @description('Toggle to enable or disable zone redudance.') param isZoneRedundant bool = false +@description('Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.') +param disableLocalAuth bool = false + +@description('Flag to indicate enabling/disabling of Partition Merge feature on the account') +param enablePartitionMerge bool = false + +@description('Enables the cassandra connector on the Cosmos DB CODE_OF_CONDUCT.md CONTRIBUTING.md account') +param enableCassandraConnector bool = false + +@description('Flag to indicate whether to enable storage analytics.') +param enableAnalyticalStorage bool = false + +@description('Disable rate limiting on responses.') +param disableRateLimitingResponses bool = false + +@description('Analytical storage specific properties.') +@allowed([ 'FullFidelity', 'None' ]) +param analyticalStorageConfiguration string = 'FullFidelity' + +@allowed([ '3.2', '3.6', '4.0', '4.2']) +param serverVersion string = '4.2' + +@description('Enable Aggregation Pipeline') +param enableAggregationPipeline bool = false + +@description('Enable MongoDBv34') +param enableMongoDBv34 bool = false + +@description('Allow Self Serve Upgrade To Mongo36') +param allowSelfServeUpgradeToMongo36 bool = false + +@description('Enable mongoEnableDocLevelTTL') +param enablemongoEnableDocLevelTTL bool = false + var consistencyPolicy = { Eventual: { defaultConsistencyLevel: 'Eventual' @@ -65,6 +110,7 @@ var secondaryRegions = [for (region, i) in secondaryLocations: { isZoneRedundant: contains(region, 'isZoneRedundant') ? region.isZoneRedundant : isZoneRedundant }] +#disable-next-line BCP334 var locations = union([ { locationName: location @@ -72,28 +118,48 @@ var locations = union([ isZoneRedundant: isZoneRedundant } ], secondaryRegions) - var capabilities = union( + disableRateLimitingResponses ? [ { name: 'DisableRateLimitingResponses' } ] : [], + enableMongo ? [ { name: 'EnableMongo' } ] : [], + allowSelfServeUpgradeToMongo36 ? [ { name: 'AllowSelfServeUpgradeToMongo36' } ] : [], + enableAggregationPipeline ? [ { name: 'EnableAggregationPipeline' } ] : [], + enableMongoDBv34 ? [ { name: 'MongoDBv34' } ] : [], + enablemongoEnableDocLevelTTL ? [ { name: 'mongoEnableDocLevelTTL' } ] : [], + enableTable ? [ { name: 'EnableTable' } ] : [], + enableGremlin ? [ { name: 'EnableGremlin' } ] : [], enableCassandra ? [ { name: 'EnableCassandra' } ] : [], enableServerless ? [ { name: 'EnableServerless' } ] : [] ) -resource cosmosDB 'Microsoft.DocumentDB/databaseAccounts@2022-05-15' = { - name: toLower(name) - location: location - kind: 'GlobalDocumentDB' - properties: { - consistencyPolicy: consistencyPolicy[defaultConsistencyLevel] - locations: locations - databaseAccountOfferType: 'Standard' - enableAutomaticFailover: systemManagedFailover - enableMultipleWriteLocations: enableMultipleWriteLocations - capabilities: capabilities +module cosmosDB 'module/cosmos.bicep' = { + name: 'deploy-cosmosdb' + params: { + name: name + location: location + properties: { + analyticalStorageConfiguration: enableAnalyticalStorage ? { + schemaType: analyticalStorageConfiguration + } : null + apiProperties: enableMongo ? { + serverVersion: serverVersion + }: null + databaseAccountOfferType: 'Standard' + locations: locations + capabilities: capabilities + consistencyPolicy: consistencyPolicy[defaultConsistencyLevel] + disableLocalAuth: disableLocalAuth + enableAnalyticalStorage: enableAnalyticalStorage + enableAutomaticFailover: systemManagedFailover + enableCassandraConnector: enableCassandraConnector + enableMultipleWriteLocations: enableMultipleWriteLocations + enablePartitionMerge: enablePartitionMerge + + } } } @description('Cosmos DB Resource ID') -output id string = cosmosDB.id +output id string = cosmosDB.outputs.id @description('Cosmos DB Resource Name') -output name string = cosmosDB.name +output name string = cosmosDB.outputs.name
    - main.bicep -69,6 +69,7 @@ param disableRateLimitingResponses bool = false @allowed([ 'FullFidelity', 'None' ]) param analyticalStorageConfiguration string = 'FullFidelity' +@description('API specific properties. Currently, supported only for MongoDB API.') @allowed([ '3.2', '3.6', '4.0', '4.2']) param serverVersion string = '4.2'
    - main.test.bicep -3,8 +3,12 @@ Write deployment tests in this file. Any module that references the main module file is a deployment test. Make sure at least one test is added. docs/ modules/ scripts/ param location string = resourceGroup().location -param name string = 'mycosmosdb${uniqueString(resourceGroup().id, location)}' -param cassandra_name string = 'mycassandradb${uniqueString(resourceGroup().id, location)}' +@minLength(3) +@maxLength(64) +param name string = take('mycosmosdb${uniqueString(resourceGroup().id, location)}', 64) +@minLength(3) +@maxLength(64) +param cassandra_name string = take('mycassandradb${uniqueString(resourceGroup().id, location)}', 64) // Prerequisites // module prereq 'prereq.test.bicep' = {
    """
    response = call_gpt(prompt)
    print(response)
